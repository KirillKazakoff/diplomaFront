async function httpPriorityStrategy(e,t){let n;try{n=await fetch(e.request)}catch(e){console.log(e)}return t.includes("send")||t.includes("leave")||t.includes("ping")?n:n?((await caches.open("v2")).put(e.request,n.clone()),n):await caches.match(e.request)}async function cachePriorityStrategy(e,t){const n=await caches.match(e.request);if(n)return n;const s=await fetch(e.request),a=await caches.open("v2");return t.includes("getFilesData")||a.put(e.request,s.clone()),s}self.addEventListener("install",(e=>{caches.open("v2").then((e=>{e.add(["./","./index.html","./main.css","./bundle.js","./img/backDefault.jpg","./img/userDefault.png","./svg/exclamation.svg"])}))})),self.addEventListener("activate",(e=>{})),self.addEventListener("fetch",(async e=>{const t=new URL(e.request.url).pathname;t.includes("bundle")||t.includes("send")||t.includes("ping")||"document"===e.request.destination||t.includes("css")||t.includes("getAllFilesData")||t.includes("leave")||t.includes("getFilesDataFiltered")?e.respondWith(httpPriorityStrategy(e,t)):e.respondWith(cachePriorityStrategy(e,t))}));